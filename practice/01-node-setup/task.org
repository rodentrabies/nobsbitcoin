* Lab 1 - Running your own Bitcoin node

** Introduction

*Bitcoin network* consists of *nodes* that perform multiple roles:
  - execute gossip protocol, exchanging blocks and transactions,
  - validate all blocks and transactions received via the gossip protocol,
  - provide local API for exploring historical Bitcoin data for the use by
    wallet software.

Initial reference implementation of Bitcoin network node software was originally
written and maintained by Satoshi Nakamoto in 2007-2010. Multiple developers
joined after the publication of the whitepaper and sources in 2008. In 2010
Satoshi transferred the ownership over the repository to Gavin Andersen, who
eventually abandoned the development and moved to other projects. Current
maintainer of the project is Wladimir J. van der Laan ([[https://github.com/laanwj][@laanwj]] on
[[https://github.com][github.com]]). The project is written in C++ and uses Python for testing.

In this lab we will be downloading the source code for the reference
implementation of the Bitcoin network node, building it from the source,
installing it locally and exploring Bitcoin data with the included ~bitcoin-cli~
command line tool.

There are alternative Bitcoin protocol implementations of various levels of
completeness and in different languages, for example
  - [[https://github.com/btcsuite/btcd][btcd]] in Golang,
  - [[https://github.com/rust-bitcoin/rust-bitcoin][rust-bitcoin]] in Rust
as well as libraries that implement some parts of Bitcoin protocol for various
purposes:
  - [[https://github.com/petertodd/python-bitcoinlib][python-bitcoinlib]] - client library in Python,
  - [[https://bitcoinj.org/][bitcoinj]] - client library in Java,
  - [[https://github.com/bitcoinjs/bitcoinjs-lib][BitcoinJS]] - client library in JS.


** Instructions

Reference Bitcoin implementation source code lives at

  https://github.com/bitcoin/bitcoin

You can clone the repository that contains the whole history of the Bitcoin code
base by running

#+BEGIN_SRC sh
  git clone https://github.com/bitcoin/bitcoin
#+END_SRC

Now go to the root of the cloned repository and checkout the most recent release
version (v0.21.0):

#+BEGIN_SRC sh
  cd bitcoin
  git checkout v0.21.0
#+END_SRC

After this follow the instructions on how to build the node from source. The
instructions can be found in the ~doc/~ directory (relative to the root of the
repository), or online at the following links:
  - Linux: https://github.com/bitcoin/bitcoin/blob/master/doc/build-unix.md
  - macOS: https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md
  - Windows: https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md

For Debian-based Linux (e.g. Ubuntu), the procedure is as follows:

#+BEGIN_SRC sh
  # install dependencies:
  sudo apt install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3
  sudo apt install libevent-dev libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev
  # install wallet dependecies (SQLite and BerkeleyDB):
  sudo apt install libsqlite3-dev
  ./contrib/install_db4.sh $(pwd)
  export BDB_PREFIX=$(pwd)/db4
  # configure and build (this will take some time)
  ./autogen.sh
  ./configure BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8" BDB_CFLAGS="-I${BDB_PREFIX}/include"
  make
  # finally, install bitcoin executables:
  sudo make install
#+END_SRC

After this, verify that the software was installed properly:

#+BEGIN_SRC sh
  $ which bitcoind
  /usr/local/bin/bitcoind
  $ which bitcoin-cli
  /usr/local/bin/bitcoin-cli
#+END_SRC

Now, in your home directory, create a directory called ~.bitcoin~ and write a
configuration file. Note that chain data will be stored in this directory, so if
you decide to synchronize the main chain, make sure the disk partition that
contains your home directory has at least 350GB of free space.

#+BEGIN_SRC sh
  cd ~
  mkdir .bitcoin
  touch .bitcoin/bitcoin.conf
#+END_SRC

In order to configure bitcoin daemon, open the file =~/.bitcoin/bitcoin.conf=
in your favourite text editor and insert the following (replacing ~<username>~
and ~<password>~, of course):

#+BEGIN_SRC sh
  # RPC settings
  rpcuser=<username>
  rpcpassword=<password>
  
  # Network settings
  txindex=1
  server=1
  rest=1
  
  # Miscellaneous
  zmqpubrawblock=tcp://127.0.0.1:28332
  zmqpubrawtx=tcp://127.0.0.1:28333
  printtoconsole=1
#+END_SRC

Now you can finally start Bitcoin node and see it begin the synchronization
process:

#+BEGIN_SRC sh
  $ bitcoind
#+END_SRC

In order to daemonize the Bitcoin node (run it in the background) run:

#+BEGIN_SRC sh
  $ bitcoind -daemon
#+END_SRC

Finally, you can run Bitcoin node in a regtest mode. Regtest mode is a mode that
allows the user to generate a new chain from scratch for testing purposes. In
order to run bitcoin in a regtest mode do

#+BEGIN_SRC sh
  $ bitcoind -regtest -daemon
#+END_SRC

In regtest mode you can generate new blocks manually:

#+BEGIN_SRC sh
  $ bitcoin-cli -regtest generatetoaddress 101 $(bitcoin-cli -regtest getnewaddress)
  $ bitcoin-cli -regtest getbalance
  50.00000000
#+END_SRC

*Research questions*:
  - how many blocks were generated by the ~generatetoaddress~ command above?
  - how many bitcoins were created by the ~generatetoaddress~ command above?
  - why the balance reported is 50 BTC?

The current blockchain can be exlored with the following commands:

#+BEGIN_SRC sh
  $ bitcoin-cli getblockcount
  672754

  $ bitcoin-cli getbestblockhash
  0000000000000000000893527ec1507a2e6f2903905ef23def9b246e2f9ab919

  $ bitcoin-cli getblock 0000000000000000000893527ec1507a2e6f2903905ef23def9b246e2f9ab919
  {
    "hash": "0000000000000000000893527ec1507a2e6f2903905ef23def9b246e2f9ab919",
    "confirmations": 1,
    "strippedsize": 892626,
    "size": 1315444,
    "weight": 3993322,
    "height": 672754,
    "version": 1073733632,
    "versionHex": "3fffe000",
    "merkleroot": "d9cf3ae978efaf5d1bf653e4d802203ffa577edec10955a1e2573ab17a1a69be",
    "tx": [
      "ddf7629c3870d7332c6d9680c551bd462150d3174ff82694b97fb998f31767d7",
      "28dbc5e1c022f735cb136ee4edea10eff713bd705199de38c22212e3d94f3e59",
      "da2fcddef5cf711f7e4a4b9a6aca8deaf9cf6f04b3466e4a04fa2888af30ef5e",
      "be7e0364b9b04dc702edc1684c2582d7e0be8ea9b98fe711d362d98b3d1aa3f5",
      ...
    ],
    "time": 1614640390,
    "mediantime": 1614635907,
    "nonce": 1041734966,
    "bits": "170cf4e3",
    "difficulty": 21724134900047.27,
    "chainwork": "00000000000000000000000000000000000000001a136cf0de3a02b63e63658d",
    "nTx": 1804,
    "previousblockhash": "00000000000000000001d9eb054f5b01adfc73eba97841132c015d8b7b36333f"
  }
  
  $ bitcoin-cli getrawtransaction ddf7629c3870d7332c6d9680c551bd462150d3174ff82694b97fb998f31767d7
  020000000001010000000000000000000000000000000000000000000000000000000000000000...

  $ bitcoin-cli decoderawtransaction 02000000000101...
  {
    "txid": "ddf7629c3870d7332c6d9680c551bd462150d3174ff82694b97fb998f31767d7",
    "hash": "d9fe834d47432f87242a13a4a5111e1ce2e9bf10bd248d512c822708a7f104c9",
    "version": 2,
    "size": 291,
    "vsize": 264,
    "weight": 1056,
    "locktime": 0,
    "vin": [
      {
        "coinbase": "03f2430a04fd743d60626a30322f48756f42692ffabe6d6df2bd997e82670a9759baf4a7c8e127abf0a4b6ad7baafd6653e8699ebbf15266010000008df9e483020061ce325a010000000000",
        "txinwitness": [
          "0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "value": 7.49384804,
        "n": 0,
        "scriptPubKey": {
          "asm": "OP_DUP OP_HASH160 52f43a457374d1a0a3e58d23ec7b5576c4eb649c OP_EQUALVERIFY OP_CHECKSIG",
          "hex": "76a91452f43a457374d1a0a3e58d23ec7b5576c4eb649c88ac",
          "reqSigs": 1,
          "type": "pubkeyhash",
          "addresses": [
            "18Zcyxqna6h7Z7bRjhKvGpr8HSfieQWXqj"
          ]
        }
      },
      {
        "value": 0.00000000,
        "n": 1,
        "scriptPubKey": {
          "asm": "OP_RETURN aa21a9edef9d63ad3b4bd4072c44491b50274cc20c7d83b8cdc310a7dce694f817ee794d",
          "hex": "6a24aa21a9edef9d63ad3b4bd4072c44491b50274cc20c7d83b8cdc310a7dce694f817ee794d",
          "type": "nulldata"
        }
      },
      {
        "value": 0.00000000,
        "n": 2,
        "scriptPubKey": {
          "asm": "OP_RETURN b9e11b6d044ae531621763ccc43ce9d3335131b2b3d1e447768d7da955eea39ec6a63be5",
          "hex": "6a24b9e11b6d044ae531621763ccc43ce9d3335131b2b3d1e447768d7da955eea39ec6a63be5",
          "type": "nulldata"
        }
      }
    ]
  }
#+END_SRC


** Demo and Questions

In order to pass the lab, be ready to demonstrate a cloned repository, a running
Bitcoin daemon and execution of the chain-exploring commands. Additionally, take
some time to find the answers to the research questions above.
